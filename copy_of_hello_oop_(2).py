# -*- coding: utf-8 -*-
"""Copy of hello OOP (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1znKH3dwoP89R1VKlysRUw5zNzqehxvdB

#choose one project:

#1-Personal Library Management System

<div class="markdown prose w-full break-words dark:prose-invert light"><p>Project Title: <strong>Personal Library Management System</strong></p><p><strong>Project Description:</strong>
For this project, you will be building a Personal Library Management System using the Python programming concepts you've learned so far. This system will allow users to manage their personal book collection, add new books, remove books, search for books, and store information about each book.</p><p><strong>Project Requirements:</strong></p><ol><li><p><strong>Class Definitions:</strong></p><ul><li>Create a class named <code>Book</code> to represent a book with attributes like title, author, genre, and publication year.</li><li>Create a class named <code>Library</code> to represent the personal library. This class should have methods to add a book, remove a book, search for a book by title or author, and display the entire library.</li></ul></li><li><p><strong>Data Structure:</strong></p><ul><li>Use appropriate data structures like lists, dictionaries, or sets to store and manage the collection of books in the library.</li></ul></li><li><p><strong>File Handling:</strong></p><ul><li>Implement methods in the <code>Library</code> class to save and load the library data to/from a text or CSV file. This will ensure that the library data is persistent across different program executions.</li></ul></li><li><p><strong>Exception Handling:</strong></p><ul><li>Implement exception handling to handle potential errors gracefully. For instance, handle cases where a book is not found, a file is not found, or input validation errors occur.</li></ul></li><li><p><strong>User Interaction:</strong></p><ul><li>Create a user-friendly command-line interface that allows users to interact with the library. Provide options to add a book, remove a book, search for a book, and display the entire library.</li></ul></li></ol><p><strong>Project Steps:</strong></p><ol><li><p><strong>Class Definitions:</strong></p><ul><li>Define the <code>Book</code> class with appropriate attributes and a constructor.</li><li>Define the <code>Library</code> class with methods for adding, removing, searching, and displaying books.</li></ul></li><li><p><strong>Data Structure:</strong></p><ul><li>Initialize an empty data structure (list or dictionary) in the <code>Library</code> class to store the book objects.</li></ul></li><li><p><strong>File Handling:</strong></p><ul><li>Implement methods in the <code>Library</code> class to save the library data to a file (e.g., "library.txt" or "library.csv").</li><li>Implement methods to load the library data from the file during program startup.</li></ul></li><li><p><strong>Exception Handling:</strong></p><ul><li>Implement try-except blocks to handle errors related to user input, file operations, and book search.</li></ul></li><li><p><strong>User Interaction:</strong></p><ul><li>Create a user-friendly menu that presents options to the user (e.g., "Add a book," "Search for a book," etc.).</li><li>Based on the user's choice, call the appropriate methods in the <code>Library</code> class.</li></ul></li></ol><p><strong>Project Extensions:</strong>
If you'd like to take this project further, consider adding the following features:</p><ul><li>Implement a graphical user interface (GUI) using a library like Tkinter or PyQt.</li><li>Allow users to rate and review books.</li><li>Sort and display books by different criteria (e.g., title, author, genre).</li><li>Provide recommendations based on the user's reading history.</li><li>Integrate an online book API to fetch book details automatically.</li></ul>
</div>
"""

# add new books
# remove books
# search for books
# store information about each book --> it will be with adding new book

class library:
  library_books = []
  postion = {}
  def remove_book(self,booka):
     try:
        if booka  not in library.library_books:
          raise Exception("problem")
        else:
          library.library_books.remove(booka)
     except Exception:
        print("the book not found to delete")
  def book_search(self,bookt):
      try:
        if bookt not in library.library_books:
          raise Exception("problem")
        else:
          library.postion[bookt] = library.library_books.index(bookt)

      except Exception:
        print("the book searching for not found")
  def file_library(self):
      my_library = open("library_books.txt","w")
      j = 0
      for i in library.library_books:
        j+=1
        my_library.write(f"{j}- {i}")
        my_library.write("\n")
class book:
  title = None
  author = None
  genre = None
  publish = None
  book_info = {}
  def __str__(self):
    return f"""book title = {book.title} \n
    the author = {book.author} \n
    book gener = {book.genre} \n
    bublishment year = {book.publish}"""
  def title_added(self,name):
    library.library_books.append(name)
    book.title = name
    book.book_info["book_name"] = name
  def author_added(self,author):
    book.author = author
    book.book_info["author"] = author
  def genre_added(self,genre):
    book.genre = genre
    book.book_info["book_genre"] = genre
  def publish_added(self,pub):
    book.publish = pub
    book.book_info["publishment_year"] = pub
  def book_file(self):
    my_book = open("book_info.txt","w")
    n = 0
    for i,j in book.book_info.items():
      n+=1
      my_book.write(f"{n}- {i} --> {j}")
      my_book.write("\n")

import getpass as gp
class check:
  password = None
  library_name = None
  user_name = None
  def checker(self):
    check1 = (input(""" hello in personal library mangment system
    1) already have a personal library
    2)login up (have no personal library)
    please enter your choice: """))
    print("-----------------------------------------")
    if check1 == "2":
      self.logup()
    elif check1 =="1":
      self.login()
    else:
      print("choice not found please run the program agian")

  def logup(self):
    check.library_name = input("please enter your library name: ")
    print("-----------------------------------------")
    while True:
        check.password = gp.getpass("enter your password in numbers please: ")
        print("-----------------------------------------")
        confirm = input("enter your confirmed password: ")
        if confirm == check.password:
          break
    check.User_name = input("enter your user name in only string: ")
    print("-----------------------------------------")
    print()
    print(f"""library name = {check.library_name}\n
    library passwrod = {check.password}\n
    username = {check.User_name}\n
    """)

  def login(self):
    password_enterd = input("""enter the password
    forgot password please type 1
    enter input: """)

    if password_enterd == check.password:
      return check.password

    elif password_enterd == "1":
      user = input("enter your account user name: ")
      print("-----------------------------------------")
      if user == check.user_name:
        print(f"your password is: {check.password} ")
      else:
        print("please make a new acoount")
    else:
      print("wrong password please run the program agian")
  def account_viwe(self):
    password_enterd2 = (input("""enter your library passworde:
    if you forget your passowrd enter 1
    enter the input:"""))
    print("-----------------------------------------")
    if password_enterd2 == check.password:

      print(f"""library name = {check.library_name}\n
    library passwrod = {check.password}\n
    username = {check.User_name}\n
    """)
    elif password_enterd2 == "1":
      user = input("enter your account user name: ")
      if user == check.User_name:
        print(f"you password is: {check.password} ")

      else:
        print("wrong user name, you cant view your library account")
    else:
      print("wrong password please run the" )

checking = check()
checking.checker()

mangment_system = None
try:
  if checking.login() == checking.password :
    mangment_system = int(input("""hello in library mangment system
    please enter the number of the ativity you want to do
    1: add books to library ,information ans make a file from it
    2:remove books from library
    3:search for a book in library
    4:have a file of the books in the library
    5: view my library
    6:check library account
    please enter your choice her """))
  else:
    raise Exception("problem")
except Exception:
  print("opps.... your account information is not correct please try again")
library_n = checking.library_name
library_n = library()
list_objects=[]
if mangment_system == 1:
  n = int(input("enter the number of books you are going to add "))
  j=0
  for i in range(n):
    j+=1
    obj = input(f"enter the name of the {j} book: ")
    print("-----------------------------------------")
    list_objects.append(obj)
    objects = {ob : book() for ob in list_objects}
    objects[obj].title_added(obj)
    auth = input("enter the book author: ")
    print("-----------------------------------------")
    objects[obj].author_added(auth)
    pub = input("enter the year the the book is published in:")
    print("-----------------------------------------")
    objects[obj].publish_added(pub)
    gen = input("enter the gener of the book: ")
    print("-----------------------------------------")
    objects[obj].genre_added(gen)

  like = input("""type y if you like to view the book information
    type n if you dont """).lower().strip()
  if like == "y":
       book_vie = input("enter the title book that you wants to view its information: ")
       print("-----------------------------------------")
       print(objects[book_vie])
  elif like == "n":
      print("your book data have been saved succefully")
  book_f = input("""enter y if you want to make a file from the book information
  enter n if dont
  enter input:  """).lower().strip()
  print("-----------------------------------------")
  if book_f == "y":
     book_file = input("enter the name of the book you want to make its information as a file: ")
     objects[book_file].book_file()
     print("book information file is succusfully proccessed it is in the file section ")
  elif book_f == "n":
    print("thanks for answering ")
elif mangment_system == 2:
  rm = input("enter the name of the book you want to remove: ")
  print("-----------------------------------------")
  try:

    if rm not in library_n.library_books:
      raise Exception("problem")
    else:
      library_n.remove_book(rm)
      print("the book have been removed succesfully")
      print("-----------------------------------------")
  except Exception:
    print("ERROR: the book is not found")
elif mangment_system == 3:
  b_search = input("enter tha name of the book to search for: ")
  print("-----------------------------------------")
  try:
    if b_search not in library_n.library_books:
      raise Exception
    else:
      library_n.postion[b_search] = library_n.library_books.index(b_search)
      print(library_n.postion)
  except Exception:
    print("ERROR: the book not found")
elif mangment_system == 4:
  library_n.file_library()
  print("-------------------------------------------")
  print("the book is downlouded succesfully in fils place")
elif mangment_system == 5:
  print("-------------------------------------------")
  print(library_n.library_books)
  print("-------------------------------------------")
elif mangment_system == 6:
  checking.account_viwe()

